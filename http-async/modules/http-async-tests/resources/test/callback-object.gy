import org.netkernel.layer0.nkf.INKFAsyncRequestListener
import org.netkernel.layer0.nkf.INKFRequest
import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.nkf.INKFResponseReadOnly
import org.netkernel.layer0.nkf.NKFException
import org.netkernel.layer0.representation.IReadableBinaryStreamRepresentation

INKFRequestContext context = context

INKFRequest req = context.createRequest ("active:httpAsync")
req.addArgumentByValue ("method", "GET")
req.addArgument ("url", "arg:url")		// Depends on "url" being passed in as an argument
req.addArgumentByValue ("callback", new MyListener())
req.setHeader (INKFRequest.HEADER_EXCLUDE_DEPENDENCIES, true);

context.issueAsyncRequest (req).setListener (context.source ("active:httpAsync/passthru-listener", INKFAsyncRequestListener.class))
context.setNoResponse()		// Causes immediate return, passthru listener will wake us up on completion

// ---------------------------------

class MyListener implements INKFAsyncRequestListener
{
	@Override
	void receiveResponse (INKFResponseReadOnly response, INKFRequestContext context) throws Exception
	{
		context.createResponseFrom (entityAsString (response.getRepresentation().getEntity())).setMimeType ("text/plain")
	}

	@Override
	void receiveException (NKFException exception, INKFRequest request, INKFRequestContext context) throws Exception
	{
		context.createResponseFrom (exception)
	}

	private String entityAsString (IReadableBinaryStreamRepresentation rep)
	{
		ByteArrayOutputStream baos = new ByteArrayOutputStream()

		rep.write (baos)

		new String (baos.toByteArray())
	}
}
