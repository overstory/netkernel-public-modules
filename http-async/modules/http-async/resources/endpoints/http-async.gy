
/*
 * Copyright 2014 OverStory LLP
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

import org.netkernel.client.http.representation.HttpClientResponseRepresentation
import org.netkernel.layer0.nkf.INKFAsyncRequestListener
import org.netkernel.layer0.nkf.INKFRequest
import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.nkf.INKFRequestReadOnly
import org.netkernel.layer0.nkf.INKFResponse
import org.netkernel.layer0.nkf.INKFResponseReadOnly
import org.netkernel.layer0.nkf.NKFException
import org.netkernel.layer0.representation.IHDSNode

INKFRequestContext context = context

try {
	INKFRequestReadOnly thisReq = context.getThisRequest()
	String method = context.source ("arg:method")

	// A callback object takes precedence over a callback URI if both are given
	INKFAsyncRequestListener callback = (thisReq.argumentExists ("callback")) ? context.source ("arg:callback", INKFAsyncRequestListener.class) : null
	String callbackUri = (thisReq.argumentExists ("callback-uri")) ? thisReq.getArgumentValue ("callback-uri") : null

	// Get the list of golden threads to attach/cut
	List<String> goldenThreads = thisReq.getArgumentValues ("golden-thread")
	List<String> goldenThreadsToCut = thisReq.getArgumentValues ("cut-golden-thread")

	// If a state is provided, use it.  Otherwise if credentials are given then create a temp state using those
	String stateId = (thisReq.argumentExists ("state")) ? context.source ("arg:state") : null
	boolean hasCredentials = thisReq.argumentExists ("credentials")
	String internalStateId = ((stateId == null) && hasCredentials) ? transientState (context) : null
	if (stateId == null) stateId = internalStateId

	// Create the async request that we will initiate with our private listener
	INKFRequest req = context.createRequest ("active:httpAsync${casedMethod (method)}".toString())
	req.addArgument ("url", "arg:url")

	if (thisReq.argumentExists ("body")) req.addArgument ("body", "arg:body")
	if (thisReq.argumentExists ("headers")) req.addArgument ("headers", "arg:headers")
	if (thisReq.argumentExists ("config")) req.addArgument ("config", "arg:config")
	if (thisReq.argumentExists ("oauth")) req.addArgument ("oauth", "arg:oauth")
	if (thisReq.argumentExists ("connectionManager")) req.addArgument ("connectionManager", "arg:connectionManager")
	if (thisReq.argumentExists ("cache")) req.addArgument ("cache", "arg:cache")
	if (stateId != null) req.addArgument ("state", stateId)

	// We always ask for a structured HTTP response object
	req.setRepresentationClass (HttpClientResponseRepresentation.class);

	// We don't want our response to depend on the transient outbound HTTP state that returned it
	req.setHeader (INKFRequest.HEADER_EXCLUDE_DEPENDENCIES, true);

	// Kick off the async operation and set our listener, then return so that the thread can be re-used
	context.issueAsyncRequest (req).setListener (new CompletionListener (callback, callbackUri, goldenThreads, goldenThreadsToCut, internalStateId))
	context.setNoResponse()
} catch (e) {
	e.printStackTrace()
	throw e
}

// -----------------------------------------------------------------

// This class always serves as the async listener.  When the operation is complete, then the
// final processing is delegated according to which callback options were provided.

class CompletionListener implements INKFAsyncRequestListener
{
	INKFAsyncRequestListener callback
	String callbackUri
	String stateId
	List<String> goldenThreads
	List<String> goldenThreadsToCut

	CompletionListener (INKFAsyncRequestListener callback, String callbackUri, List<String> goldenThreads, List<String> goldenThreadsToCut, String stateId)
	{
		this.callback = callback
		this.callbackUri = callbackUri
		this.stateId = stateId
		this.goldenThreads = goldenThreads
		this.goldenThreadsToCut = goldenThreadsToCut
	}

	@Override
	void receiveResponse (INKFResponseReadOnly httpResponse, INKFRequestContext context) throws Exception
	{
		// If we createed the state object, delete it
		if (stateId != null) context.delete (stateId)

		// Get the structured HTTP response object
		HttpClientResponseRepresentation hcrr = httpResponse.getRepresentation() as HttpClientResponseRepresentation

		// If any golden thread IDs were given, attach them as dependencies to our response
		if (goldenThreads.size() > 0) {
			INKFRequest req = context.createRequest ("active:attachGoldenThread")
			goldenThreads.each { String thread -> req.addArgument ("id", thread) }
			context.issueRequest (req)
		}

		// If any golden thread IDs were given cut, snip them now
		if (goldenThreadsToCut.size() > 0) {
			INKFRequest req = context.createRequest ("active:cutGoldenThread")
			goldenThreadsToCut.each { String thread -> req.addArgument ("id", thread) }
			context.issueRequest (req)
		}

		if (callback != null) {
			// Delegate to the client-provided listener object
			callback.receiveResponse (httpResponse, context)
		} else if (callbackUri != null) {
			// Resolve the client's callback handler with the HCRR as an argument
			INKFRequest req = context.createRequest (callbackUri)
			req.addArgumentByValue ("http-response", hcrr)

			/*INKFResponse response =*/ context.createResponseFrom (context.issueRequestForResponse (req))
//			response.setExpiry (INKFResponse.EXPIRY_NEVER)
//			response.setNoCache()
		} else {
			// No client-provided handler, copy the HTTP response through as the response
			// Note that this assumes that we're in the scope of an HTTP request and can construct a response
			List<String> dontCopyHeaders = [ "content-length", "server", "connection", "keep-alive" ]
			INKFResponse response = context.createResponseFrom (hcrr.getEntity())
			response.setMimeType (hcrr.getHeader ("content-type"))
			response.setHeader ("httpResponse:/code", hcrr.getResponseCode())

			hcrr.getImplementingHDS().getNodes("//httpHeaders/*").each { IHDSNode node ->
				String name = node.getName()
				if ( ! dontCopyHeaders.contains (name.toLowerCase())) {
					response.setHeader ("httpResponse:/header/${ name }".toString(), node.getValue())
				}
			}

//			response.setExpiry (INKFResponse.EXPIRY_NEVER)
//			response.setNoCache()
			// ToDo: Look at cache control headers on response and set local cache expiry to match?
		}
	}

	@Override
	void receiveException (NKFException exception, INKFRequest request, INKFRequestContext context) throws Exception
	{
		// If we createed the state object, delete it
		if (stateId != null) context.delete (stateId)

		// If the client gave us a callback object, delegate to it
		if (callback != null) {
			callback.receiveException (exception, request, context)
			return;
		}

		// By default, simply create a response from the exception
		context.createResponseFrom (exception);
	}
}

// -----------------------------------------------------------------

// Turns "GET" into "Get"

def casedMethod (String method)
{
	"${method.charAt(0).toUpperCase()}${method.substring (1).toLowerCase()}".toString()
}

// Creates a temporary HTTP State resource from the given credentials.  This object
// will be destroyed when the async operation is complete.

def transientState (INKFRequestContext context)
{
	INKFRequest req = context.createRequest ("active:httpAsync/newState")

	req.addArgumentByValue ("credentials", context.source ("arg:credentials"))

	// Make sure this resource does not depend on the transient HTTP state
	req.setHeader (INKFRequest.HEADER_EXCLUDE_DEPENDENCIES, true);

	return context.issueRequest (req)
}

// -----------------------------------------------------------------

